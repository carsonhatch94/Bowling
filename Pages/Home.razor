@page "/"
@using Bowling.Components

<PageTitle>Bowling</PageTitle>
<style>
    .score-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .score-square {
        width: 100px;
        height: 100px;
        border: 2px solid #000;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        margin: 10px;
        font-size: 24px;
        padding-top: 10px;
    }

    .frame {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
    }

    .roll-container {
        display: flex;
        justify-content: center;
    }

    .roll-1-score, .roll-2-score, .roll-3-score {
        margin: 5px;
    }

    .score-number {
        font-size: 48px;
    }

    button {
        width: 50px;
        height: 50px;
    }

    .strike {
        width: 104px;
        height: 50px;
    }
</style>

<h1>Welcome to Carson's Bowling Center</h1>

Let's Roll!

<div class="score-container">
    <FrameComponent FrameNumber="1" Frame="scoreCard.Frames[0]" ActiveFrame="activeFrame" GetRunningTotal="GetRunningTotal" />
    <FrameComponent FrameNumber="2" Frame="scoreCard.Frames[1]" ActiveFrame="activeFrame" GetRunningTotal="GetRunningTotal" />
    <FrameComponent FrameNumber="3" Frame="scoreCard.Frames[2]" ActiveFrame="activeFrame" GetRunningTotal="GetRunningTotal" />
    <FrameComponent FrameNumber="4" Frame="scoreCard.Frames[3]" ActiveFrame="activeFrame" GetRunningTotal="GetRunningTotal" />
    <FrameComponent FrameNumber="5" Frame="scoreCard.Frames[4]" ActiveFrame="activeFrame" GetRunningTotal="GetRunningTotal" />
    <FrameComponent FrameNumber="6" Frame="scoreCard.Frames[5]" ActiveFrame="activeFrame" GetRunningTotal="GetRunningTotal" />
    <FrameComponent FrameNumber="7" Frame="scoreCard.Frames[6]" ActiveFrame="activeFrame" GetRunningTotal="GetRunningTotal" />
    <FrameComponent FrameNumber="8" Frame="scoreCard.Frames[7]" ActiveFrame="activeFrame" GetRunningTotal="GetRunningTotal" />
    <FrameComponent FrameNumber="9" Frame="scoreCard.Frames[8]" ActiveFrame="activeFrame" GetRunningTotal="GetRunningTotal" />

    <div class="frame">
        <div class="score-number">10</div>
        <div class="score-square">
            <div class="roll-container">
                <div class="roll-1-score">@((scoreCard.Frames[9].FirstRoll == -1) ? "" : scoreCard.Frames[9].FirstRoll.ToString())</div>
                <div class="roll-2-score">@((scoreCard.Frames[9].SecondRoll == -1) ? "" : scoreCard.Frames[9].SecondRoll.ToString())</div>
                <div class="roll-3-score">@((scoreCard.Frames[9].ThirdRoll == -1) ? "" : scoreCard.Frames[9].ThirdRoll.ToString())</div>
            </div>
            <div class="frame-10-score">@((scoreCard.GameOver) ? scoreCard.TotalScore : "")</div>
        </div>
    </div>

    <div class="frame">
        <div class="score-number">Total</div>
        <div class="score-square">
            <div class="total">@scoreCard.TotalScore</div>
        </div>
    </div>
</div>
@if (!scoreCard.GameOver)
{
    <div>
        <p>Frame @activeFrame</p>
        <p>Roll @rollCount</p>
    </div>
    //TODO: Add a reset button
    //TODO: See if I can make a button component
    <div class="score-button-container">
        <div class="top-row">
            <button class="one" @onclick="() => Roll(1)" disabled="@DisableButton(firstRoll, 1)">1</button>
            <button class="two" @onclick="() => Roll(2)" disabled="@DisableButton(firstRoll, 2)">2</button>
            <button class="three" @onclick="() => Roll(3)" disabled="@DisableButton(firstRoll, 3)">3</button>
        </div>
        <div class="middle-row">
            <button class="four" @onclick="() => Roll(4)" disabled="@DisableButton(firstRoll, 4)">4</button>
            <button class="five" @onclick="() => Roll(5)" disabled="@DisableButton(firstRoll, 5)">5</button>
            <button class="six" @onclick="() => Roll(6)" disabled="@DisableButton(firstRoll, 6)">6</button>
        </div>
        <div class="middle-row-2">
            <button class="seven" @onclick="() => Roll(7)" disabled="@DisableButton(firstRoll, 7)">7</button>
            <button class="eight" @onclick="() => Roll(8)" disabled="@DisableButton(firstRoll, 8)">8</button>
            <button class="nine" @onclick="() => Roll(9)" disabled="@DisableButton(firstRoll, 9)">9</button>
        </div>
        <div class="bottom-row">
            <button class="zero" @onclick="() => Roll(0)">0</button>
            <button class="strike" @onclick="() => Roll(10 - firstRoll)">@((rollCount == 1) ? "Strike!" : "Spare!")</button>
        </div>
    </div>
}

@code {
    ScoreCard scoreCard = new ScoreCard();
    int activeFrame = 1;
    int firstRoll = 0;
    int rollCount = 1;
    int runningTotal = 0;
    //TODO: Possibly move these somewhere else? See if I can integrate FrameTenRoll into regular roll method

    bool DisableButton(int firstRoll, int buttonValue)
    {
        if (activeFrame == 10)
        {
            if (rollCount != 3)
            {
                return 10 - scoreCard.Frames[9].FirstRoll < buttonValue;
            }
        }

        return 10 - firstRoll < buttonValue;
    }

    void FrameTenRoll(int roll)
    {
        Frame currentFrame = scoreCard.Frames.First(f => f.FrameNumber == activeFrame);
        if (rollCount == 1)
        {
            firstRoll = roll;
            currentFrame.FirstRoll = roll;
            scoreCard.Rolls.Add(roll);
            if (roll == 10)
            {
                scoreCard.FrameScores[9] = 10;
            }
        }
        else if (rollCount == 2)
        {
            currentFrame.SecondRoll = roll;
            scoreCard.Rolls.Add(roll);

            int frameScore = currentFrame.FirstRoll + currentFrame.SecondRoll;
            scoreCard.FrameScores[9] = frameScore;

            if (frameScore < 10)
            {
                scoreCard.GameOver = true;
            }
            else if (frameScore == 10)
            {
                scoreCard.FrameScores[9] = 10;
            }
            else if (frameScore == 20)
            {
                scoreCard.FrameScores[9] = 20;
            }

        }
        else if (rollCount == 3)
        {
            currentFrame.ThirdRoll = roll;
            scoreCard.Rolls.Add(roll);
            scoreCard.FrameScores[9] += currentFrame.ThirdRoll;
            scoreCard.GameOver = true;
        }

        if (scoreCard.GameOver)
        {
            scoreCard.UpdateTotalScore();
        }
        rollCount++;

    }

    void Roll(int roll)
    {
        Frame currentFrame = scoreCard.Frames.First(f => f.FrameNumber == activeFrame);
        AwardBonuses(roll);

        if (activeFrame == 10)
        {
            FrameTenRoll(roll);
            firstRoll = 0;
            return;
        }
        if (rollCount == 1)
        {
            HandleFirstRoll(currentFrame, roll);
        }
        else if (rollCount == 2)
        {
            HandleSecondRoll(currentFrame, roll);
        }
        scoreCard.UpdateTotalScore();
    }

    void AwardBonuses(int roll)
    {
        var spareFrames = scoreCard.Frames.Where(f => f.IsSpare);
        var strikeFrames = scoreCard.Frames.Where(f => f.IsStrike);

        if (spareFrames.Any())
        {
            AwardSpareBonus(spareFrames.First(), roll);
        }

        foreach (var frame in strikeFrames)
        {
            AwardStrikeBonus(frame, roll);
        }
    }

    void HandleFirstRoll(Frame currentFrame, int roll)
    {
        firstRoll = roll;
        currentFrame.FirstRoll = roll;
        scoreCard.Rolls.Add(roll);

        if (roll == 10)
        {
            currentFrame.IsStrike = true;
            scoreCard.FrameScores[activeFrame - 1] = 10;
            activeFrame++;
            rollCount = 1;
            firstRoll = 0;
            return;
        }

        rollCount = 2;
    }

    void HandleSecondRoll(Frame currentFrame, int roll)
    {
        currentFrame.SecondRoll = roll;
        scoreCard.Rolls.Add(roll);

        int frameScore = currentFrame.FirstRoll + currentFrame.SecondRoll;
        scoreCard.FrameScores[activeFrame - 1] = frameScore;

        if (frameScore == 10)
        {
            currentFrame.IsSpare = true;
        }

        activeFrame++;
        rollCount = 1;
        firstRoll = 0;
    }

    void AwardSpareBonus(Frame spareFrame, int roll)
    {
        spareFrame.FirstBonus = roll;
        scoreCard.FrameScores[spareFrame.FrameNumber - 1] += roll;
        spareFrame.IsSpare = false;
    }

    void AwardStrikeBonus(Frame frame, int roll)
    {
        if (frame.FirstBonus != -1 && frame.SecondBonus == -1)
        {
            frame.SecondBonus = roll;
            scoreCard.FrameScores[frame.FrameNumber - 1] += (frame.FirstBonus + frame.SecondBonus);
            frame.IsStrike = false;
        }
        if (frame.FirstBonus == -1)
        {
            frame.FirstBonus = roll;
        }
    }

    int GetRunningTotal(int frame)
    {
        int runningTotal = 0;
        for (int i = 0; i < frame; i++)
        {
            runningTotal += scoreCard.FrameScores[i];
        }
        
        return runningTotal;
    }
}
